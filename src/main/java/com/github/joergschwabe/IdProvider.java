package com.github.joergschwabe;

import java.util.Set;

import com.google.common.collect.BiMap;
import com.google.common.collect.HashBiMap;

/**
 * Assigns integer identifiers to object
 * 
 * @author Yevgeny Kazakov
 *
 * @param <O>
 *            the type of objects to which integer identifiers are assigned
 */
public class IdProvider<O> {

	/**
	 * where the fresh identifiers are obtained from
	 */
	private final IdSupplier idSup_;

	/**
	 * a correspondence between objects and integer identifiers
	 */
	private final BiMap<O, Integer> idMap_ = HashBiMap.<O, Integer> create();

	/**
	 * Creates a new {@link IdProvider} that assigns the integer identifiers
	 * generated by the given {@link IdSupplier} to new objects
	 * 
	 * @param idSup
	 *            an {@link IdSupplier} used to generate new integer identifiers
	 */
	public IdProvider(IdSupplier idSup) {
		this.idSup_ = idSup;
	}

	/**
	 * Obtains an integer identifier assigned to a given object; the same
	 * identifier should be returned for equal objects
	 * 
	 * @param object
	 *            the object for which to return an identifier
	 * @return the integer identifier corresponding to the given object
	 */
	public int getId(O object) {
		Integer result = idMap_.get(object);
		if (result == null) {
			result = idSup_.getNextId();
			idMap_.put(object, result);
		}
		return result;
	}

	/**
	 * Obtains an object to which the given identifier is assigned.
	 * 
	 * @param id
	 *            the integer identifier
	 * @return the object that has the given identifier or {@code null} if the
	 *         given identifier has not been yet assigned to any object
	 */
	public O getValue(int id) {
		return idMap_.inverse().get(id);
	}

	/**
	 * @return the set of all known identifiers. These are all identifiers
	 *         returned by the method {@link #getId(Object)}
	 */
	public Set<Integer> getIds() {
		return idMap_.values();
	}

}
